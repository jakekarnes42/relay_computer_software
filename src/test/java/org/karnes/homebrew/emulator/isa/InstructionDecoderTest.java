package org.karnes.homebrew.emulator.isa;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.karnes.homebrew.bitset.FixedBitSet;
import org.karnes.homebrew.emulator.component.register.RegisterName;
import org.karnes.homebrew.emulator.component.register.StackRegisterName;

import static org.junit.jupiter.api.Assertions.*;

class InstructionDecoderTest {

    InstructionDecoder decoder;

    @BeforeEach
    void setUp() {
        decoder = new InstructionDecoder();
    }

    @Test
    void decodeNOP() {
        FixedBitSet binary = new FixedBitSet(Short.SIZE);
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOPInstruction);
        assertEquals("NOP", instruction.getName());
        assertEquals(binary, instruction.toBinary());
    }

    @Test
    void decodeHALT() {
        FixedBitSet binary = new FixedBitSet("1111 1111 1111 1111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof HALTInstruction);
        assertEquals("HALT", instruction.getName());
        assertEquals(binary, instruction.toBinary());
    }

    @Test
    void decodeTIN() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 0000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof TINInstruction);
        assertEquals("TIN", instruction.getName());
        assertEquals(binary, instruction.toBinary());
    }

    @Test
    void decodeTOUT() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 0000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof TOUTInstruction);
        assertEquals("TOUT", instruction.getName());
        assertEquals(binary, instruction.toBinary());
    }

    @Test
    void decodeJMP() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof JMPInstruction);
        assertEquals("JMP", instruction.getName());
        assertEquals(binary, instruction.toBinary());
    }


    @Test
    void decodeConditionalJumpJZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00001");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00010");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00011");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJO() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00100");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JO", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJOZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00101");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JOZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJOS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00110");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JOS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJOSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 00111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JOSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJC() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JC", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01001");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01010");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01011");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCO() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01100");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCO", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCOZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01101");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCOZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCOS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01110");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCOS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJCOSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 01111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JCOSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJN() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JN", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10001");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10010");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10011");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNO() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10100");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNO", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNOZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10101");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNOZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNOS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10110");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNOS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNOSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 10111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNOSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNC() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNC", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11001");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11010");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11011");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCO() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11100");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCO", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCOZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11101");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCOZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCOS() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11110");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCOS", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeConditionalJumpJNCOSZ() {
        FixedBitSet binary = new FixedBitSet("0000 1000 000 11111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ConditionalJMPInstruction);
        assertEquals("JNCOSZ", instruction.getName());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.AX, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.BX, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.CX, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.DX, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.EX, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.SP, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeLOAD_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0001 0000 0 [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof LOADInstruction);
        assertEquals("LOAD", instruction.getName());
        assertEquals(RegisterName.RP, ((LOADInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_AX() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.AX, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_BX() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.BX, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_CX() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.CX, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_DX() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.DX, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_EX() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.EX, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_SP() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.SP, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_RP() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.RP, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDIN_PC() {
        FixedBitSet binary = new FixedBitSet("1000 0000 0000 1 [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDINInstruction);
        assertEquals("WRDIN", instruction.getName());
        assertEquals(RegisterName.PC, ((WRDINInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_AX() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.AX, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_BX() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.BX, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_CX() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.CX, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_DX() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.DX, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_EX() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.EX, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_SP() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.SP, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_RP() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.RP, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeWRDOUT_PC() {
        FixedBitSet binary = new FixedBitSet("1000 1000 0000 1 [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof WRDOUTInstruction);
        assertEquals("WRDOUT", instruction.getName());
        assertEquals(RegisterName.PC, ((WRDOUTInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeRET_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] 111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof RETInstruction);
        assertEquals("RET", instruction.getName());
        assertEquals(StackRegisterName.SP, ((RETInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeRET_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] 111");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof RETInstruction);
        assertEquals("RET", instruction.getName());
        assertEquals(StackRegisterName.RP, ((RETInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    void decodeCALL_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0100 [0] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof CALLInstruction);
        assertEquals("CALL", instruction.getName());
        assertEquals(StackRegisterName.SP, ((CALLInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeCALL_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0100 [1] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof CALLInstruction);
        assertEquals("CALL", instruction.getName());
        assertEquals(StackRegisterName.RP, ((CALLInstruction) instruction).getRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_AX_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_BX_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_CX_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_DX_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_EX_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_SP_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_RP_PC() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_AX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_BX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_CX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_DX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_EX() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_SP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeMOV_PC_RP() {
        FixedBitSet binary = new FixedBitSet("1111 1111 11 [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof MOVInstruction);
        assertEquals("MOV", instruction.getName());
        assertEquals(RegisterName.PC, ((MOVInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((MOVInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }


    @Test
    void decodeINC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [000] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [001] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [010] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [011] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [100] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [101] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [110] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeINC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 001 [111] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof INCInstruction);
        assertEquals("INC", instruction.getName());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((INCInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [000] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [001] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [010] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [011] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [100] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [101] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [110] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeDEC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 011 [111] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof DECInstruction);
        assertEquals("DEC", instruction.getName());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((DECInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [000] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [001] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [010] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [011] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [100] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [101] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [110] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [000] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [001] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [010] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [011] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [100] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [101] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [110] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeNOT_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 111 [111] [111] 000");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof NOTInstruction);
        assertEquals("NOT", instruction.getName());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((NOTInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSTORE_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0010 00 [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof STOREInstruction);
        assertEquals("STORE", instruction.getName());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((STOREInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeFETCH_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0010 0100 00 [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof FETCHInstruction);
        assertEquals("FETCH", instruction.getName());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((FETCHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [0] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.SP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePUSH_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0001 [1] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof PUSHInstruction);
        assertEquals("PUSH", instruction.getName());
        assertEquals(StackRegisterName.RP, ((PUSHInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((PUSHInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.AX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.AX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.BX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.BX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.CX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.CX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.DX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.DX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.EX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.EX, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.SP, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.SP, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [0] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.RP, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.SP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodePOP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0100 0000 0010 [1] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof POPInstruction);
        assertEquals("POP", instruction.getName());
        assertEquals(RegisterName.RP, ((POPInstruction) instruction).getDestinationRegister());
        assertEquals(StackRegisterName.RP, ((POPInstruction) instruction).getSourceRegister());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_AX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [000] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_BX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [001] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_CX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [010] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_DX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [011] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_EX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [100] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_SP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [101] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_RP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [110] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeADD_PC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 000 [111] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ADDInstruction);
        assertEquals("ADD", instruction.getName());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ADDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_AX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [000] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_BX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [001] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_CX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [010] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_DX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [011] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_EX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [100] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_SP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [101] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_RP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [110] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeSUB_PC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 010 [111] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof SUBInstruction);
        assertEquals("SUB", instruction.getName());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((SUBInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_AX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [000] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_BX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [001] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_CX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [010] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_DX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [011] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_EX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [100] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_SP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [101] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_RP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [110] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeXOR_PC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 100 [111] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof XORInstruction);
        assertEquals("XOR", instruction.getName());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((XORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_AX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [000] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_BX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [001] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_CX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [010] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_DX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [011] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_EX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [100] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_SP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [101] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_RP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [110] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeOR_PC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 101 [111] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ORInstruction);
        assertEquals("OR", instruction.getName());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ORInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_AX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [000] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_BX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [001] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_CX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [010] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_DX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [011] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_EX_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [100] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_SP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [101] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_RP_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [110] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_AX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [000] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_BX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [001] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_CX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [010] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_DX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [011] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_EX_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [100] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_SP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [101] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_RP_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [110] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_AX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [000]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.AX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_BX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [001]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.BX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_CX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [010]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.CX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_DX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [011]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.DX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_EX() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [100]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.EX, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_SP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [101]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.SP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_RP() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [110]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.RP, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }

    @Test
    void decodeAND_PC_PC_PC() {
        FixedBitSet binary = new FixedBitSet("0001 110 [111] [111] [111]");
        Instruction instruction = decoder.decode(binary);
        assertNotNull(instruction);
        assertTrue(instruction instanceof ANDInstruction);
        assertEquals("AND", instruction.getName());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getDestinationRegister());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource2Register());
        assertEquals(RegisterName.PC, ((ANDInstruction) instruction).getSource1Register());
        assertEquals(binary, instruction.toBinary());

    }


}